本地初始化一个项目
首先，你需要执行下面两条命令，作为 git 的基础配置，作用是告诉 git 你是谁，你输入的信息将出现在你创建的提交中。
git config --global user.name "你的名字或昵称"
git config --global user.email "你的邮箱"
然后在你的需要初始化版本库的文件夹中执行：
git init 
git remote add origin <你的项目地址> //注:项目地址形式
为:http://git.oschina.net/xxx/xxx.git或者 git@git.oschina.net:xxx/xxx.git
这样就完成了一次版本你的初始化。
如果你想克隆一个项目，只需要执行：
git clone <项目地址>
完成第一次提交
进入你已经初始化好的或者克隆项目的目录，然后执行：
git pull origin master
======================================================================================
git clone
git clone git@github.com:sunrz/test.git
sunrz用户名 test仓库

git status 查看当前状态

git pull
git pull <远程主机名> <远程分支名>:<本地分支名> //git pull = git fetch + git merge 
git pull origin master:brantest //将远程主机origin的master分支拉取过来，与本地的brantest分支合并。
git pull origin master //表示将远程origin主机的master分支拉取过来和本地的当前分支进行合并。

git fetch
git fetch origin master:tmp //在本地新建一个temp分支，并将远程origin仓库的master分支代码下载到本地temp分支
git diff tmp //来比较本地代码与刚刚从远程下载下来的代码的区别
git merge tmp //合并temp分支到本地的master分支
git branch -d temp //如果不想保留temp分支 可以用这步删除

提交
git add project //添加文件至暂存区
git commit -m "xxx" //xxx为git commit提交信息，是对这个提交的概述
git log //用于查看提交的日志

git push <远程主机名> <本地分支名>  <远程分支名>
git push origin master //如果远程分支被省略，如上则表示将本地分支推送到与之存在追踪关系的远程分支（通常两者同名），如果该远程分支不存在，则会被新建
git push origin ：refs/for/master //如果省略本地分支名，则表示删除指定的远程分支，因为这等同于推送一个空的本地分支到远程分支，等同于 git push origin --delete master
git push origin //如果当前分支与远程分支存在追踪关系，则本地分支和远程分支都可以省略，将当前分支推送到origin主机的对应分支 
git push //如果当前分支只有一个远程分支，那么主机名都可以省略，形如 git push，可以使用git branch -r ，查看远程的分支名

删除远程分支
git push origin --delete Chapater6   可以删除远程分支Chapater6   
删除本地分支
git branch -d Chapater8

用git创建仓库
mkdir xxx //xxx仓库名
git init //初始化仓库

//修复未提交文件中的错误(重置)
git reset HEAD xxx//xxx是文件，将暂存区恢复到工作区状态,不影响原来本地文件
//本地commit未push到仓库
git reset --mixed(default) HEAD //HEAD发生改变，stage发生改变，工作区不改变
git reset --soft HEAD //HEAD发生改变，stage不改变，工作区不改变
git reset --hard HEAD //回退一个版本,HEAD发生改变，stage发生改变，工作区发生改变

//本地已经push到仓库了
git revert HEAD //撤销本次commit，然后再commit

//远程仓库
git remote //查看远程仓库
git remote -v //查看远程仓库
git remote show origin //查看远程仓库的详细信息
it remote add [shortname] [url] //添加远程仓库

git diff

git branch //显示本地分支，同时确认当前所在的分支
git branch -a //显示远程分支信息
git branch xxx //创建名为xxx的分支

git checkout xxx //切换到xxx分支
git checkout -b xxx //在当前分支节点上创建新的分支xxx，并切换到xxx分支下
git checkout --orphan xxx //创建一个空的分支xxx
git checkout - //切换到上一个分支
git checkout -- xxxx //xxx文件在工作区，未add到stage aear，恢复还原

git stash //将将修改暂存起来
git checkout . //清空工作区
git stash pop //弹出修改内容
git stash list //查看保存的内容列表
git apply stash@{x} //应用任意一次修改到当前目录
git stash drop stash@{1} //丢掉stash@{1}
git stash save “xxx” //保存时打标记

git merge xxx //合并分支xxx到当前分支
git mergetool //图形化工具

git rm --cached <file> //删除暂存区或分支上的文件，本地不删除
git rm <file> //删除暂存区或分支上的文件，本地同时也删除
git rm -rf <file> //删除文件file
git remote rm origin //删除指定的远程

